{"version":3,"sources":["components/LineGraph.module.css","components/ChartView.js","components/LineGraph.js","components/ThreeD.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ChartView","myLineChart","Chart","defaults","global","defaultFontFamily","legend","display","LineGraph","chartRef","React","createRef","buildChart","myChartRef","current","getContext","props","data","average","labels","destroy","type","datasets","label","fill","borderColor","options","this","className","classes","graphContainer","id","ref","Component","ThreeD","scene","THREE","camera","window","innerWidth","innerHeight","renderer","setSize","document","body","appendChild","domElement","geometry","material","color","cube","add","position","z","render","addEventListener","e","isComposing","keyCode","x","rotation","y","App","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0HACAA,EAAOC,QAAU,CAAC,eAAiB,oC,oMCiDpBC,IC/CXC,E,oDAGJC,IAAMC,SAASC,OAAOC,kBAAoB,wBAC1CH,IAAMC,SAASC,OAAOE,OAAOC,SAAU,E,IAGlBC,E,2MACjBC,SAAWC,IAAMC,Y,EAUjBC,WAAa,WACT,IAAMC,EAAa,EAAKJ,SAASK,QAAQC,WAAW,MADrC,EAEmB,EAAKC,MAA/BC,EAFO,EAEPA,KAAMC,EAFC,EAEDA,QAASC,EAFR,EAEQA,OAEI,qBAAhBlB,GAA6BA,EAAYmB,UAEpDnB,EAAc,IAAIC,IAAMW,EAAY,CAChCQ,KAAM,OACNJ,KAAM,CAEFE,OAAQA,EACRG,SAAU,CACN,CACIC,MAAO,QACPN,KAAMA,EACNO,MAAM,EACNC,YAAa,WAEjB,CACIF,MAAO,mBACPN,KAAMC,EACNM,MAAM,EACNC,YAAa,aAIzBC,QAAS,M,mFAjCbC,KAAKf,e,2CAILe,KAAKf,e,+BAsCL,OACI,yBAAKgB,UAAWC,IAAQC,gBACpB,4BACIC,GAAG,UACHC,IAAKL,KAAKlB,gB,GAlDSwB,a,OCwCxBC,E,4LA5CX,IAAIC,EAAQ,IAAIC,IACZC,EAAS,IAAID,IAAyB,GAAIE,OAAOC,WAAWD,OAAOE,YAAa,GAAK,KACrFC,EAAW,IAAIL,IACnBK,EAASC,QAASJ,OAAOC,WAAYD,OAAOE,aAC5CG,SAASC,KAAKC,YAAaJ,EAASK,YACpC,IAAIC,EAAW,IAAIX,IAAmB,EAAG,EAAG,GACxCY,EAAW,IAAIZ,IAAyB,CAAEa,MAAO,QACjDC,EAAO,IAAId,IAAYW,EAAUC,GACrCb,EAAMgB,IAAKD,GACXb,EAAOe,SAASC,EAAI,EAKlBZ,EAASa,OAAQnB,EAAOE,GAI1BC,OAAOiB,iBAAiB,WAAU,SAAAC,IAC1BA,EAAEC,aAAyB,IAAXD,EAAEE,WAClBrB,EAAOe,SAASO,GAAK,MAGrBH,EAAEC,aAAwB,IAAXD,EAAEE,WACjBR,EAAKU,SAASC,GAAK,KAET,IAAXL,EAAEE,UACDR,EAAKU,SAASD,GAAK,KAET,IAAXH,EAAEE,UACDR,EAAKU,SAASC,GAAK,U,+BAUvB,OAAQ,kC,GA3CK5B,a,MC2BN6B,MAxBf,WACE,OACE,yBAAKlC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcmC,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCZNC,IAASb,OAAO,kBAAC,EAAD,MAASX,SAASyB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.387fa6a5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"graphContainer\":\"LineGraph_graphContainer__3Jjfp\"};","import React from 'react';\nimport './ChartView.css';\nimport Chart from 'chart.js'\n\nfunction ChartView() {\n\n  var ctx = document.getElementById('myChart').getContext('2d');\n  var myChart = new Chart(ctx, {\n    type: 'bar',\n    data: {\n        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n        datasets: [{\n            label: '# of Votes',\n            data: [12, 19, 3, 5, 2, 3],\n            backgroundColor: [\n                'rgba(255, 99, 132, 0.2)',\n                'rgba(54, 162, 235, 0.2)',\n                'rgba(255, 206, 86, 0.2)',\n                'rgba(75, 192, 192, 0.2)',\n                'rgba(153, 102, 255, 0.2)',\n                'rgba(255, 159, 64, 0.2)'\n            ],\n            borderColor: [\n                'rgba(255, 99, 132, 1)',\n                'rgba(54, 162, 235, 1)',\n                'rgba(255, 206, 86, 1)',\n                'rgba(75, 192, 192, 1)',\n                'rgba(153, 102, 255, 1)',\n                'rgba(255, 159, 64, 1)'\n            ],\n            borderWidth: 1\n        }]\n    },\n    options: {\n        scales: {\n            yAxes: [{\n                ticks: {\n                    beginAtZero: true\n                }\n            }]\n        }\n    }\n});\n  return (\n    <div className=\"\">\n     <canvas id='myChart' width=\"400\" height=\"400\"></canvas>\n    </div>\n  );\n}\n\nexport default ChartView;\n","import React, { Component } from 'react'\r\nimport Chart from \"chart.js\";\r\nimport classes from \"./LineGraph.module.css\";\r\nlet myLineChart;\r\n\r\n//--Chart Style Options--//\r\nChart.defaults.global.defaultFontFamily = \"'PT Sans', sans-serif\"\r\nChart.defaults.global.legend.display = false;\r\n//--Chart Style Options--//\r\n\r\nexport default class LineGraph extends Component {\r\n    chartRef = React.createRef();\r\n\r\n    componentDidMount() {\r\n        this.buildChart();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.buildChart();\r\n    }\r\n\r\n    buildChart = () => {\r\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\r\n        const { data, average, labels } = this.props;\r\n\r\n        if (typeof myLineChart !== \"undefined\") myLineChart.destroy();\r\n\r\n        myLineChart = new Chart(myChartRef, {\r\n            type: \"line\",\r\n            data: {\r\n                //Bring in data\r\n                labels: labels,\r\n                datasets: [\r\n                    {\r\n                        label: \"Sales\",\r\n                        data: data,\r\n                        fill: false,\r\n                        borderColor: \"#6610f2\"\r\n                    },\r\n                    {\r\n                        label: \"National Average\",\r\n                        data: average,\r\n                        fill: false,\r\n                        borderColor: \"#E0E0E0\"\r\n                    }\r\n                ]\r\n            },\r\n            options: {\r\n                //Customize chart options\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className={classes.graphContainer}>\r\n                <canvas\r\n                    id=\"myChart\"\r\n                    ref={this.chartRef}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react'\r\nimport * as THREE from 'three'\r\n\r\nclass ThreeD extends Component{\r\n    componentDidMount(){\r\n        // === THREE.JS CODE START ===\r\n    var scene = new THREE.Scene();\r\n    var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\r\n    var renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize( window.innerWidth, window.innerHeight );\r\n    document.body.appendChild( renderer.domElement );\r\n    var geometry = new THREE.BoxGeometry( 1, 1, 1 );\r\n    var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\r\n    var cube = new THREE.Mesh( geometry, material );\r\n    scene.add( cube );\r\n    camera.position.z = 5;\r\n    var animate = function () {\r\n    //   requestAnimationFrame( animate );\r\n    //   cube.rotation.x += 0.01;\r\n    //   cube.rotation.y += 0.01;\r\n      renderer.render( scene, camera );\r\n    };\r\n    animate();\r\n\r\n    window.addEventListener('keydown',e=>{\r\n        if( e.isComposing|| e.keyCode==37){\r\n            camera.position.x += 0.01;\r\n            // cube.rotation.x += 0.01\r\n        }\r\n        if( e.isComposing||e.keyCode==38){\r\n            cube.rotation.y += 0.01\r\n        }\r\n        if(e.keyCode==39){\r\n            cube.rotation.x -= 0.01\r\n        }\r\n        if(e.keyCode==40){\r\n            cube.rotation.y -= 0.01\r\n        }\r\n\r\n    })\r\n\r\n    // === THREE.JS EXAMPLE CODE END ===\r\n\r\n    }\r\n\r\n    render(){\r\n        return (<div></div>)\r\n    }\r\n}\r\n\r\nexport default ThreeD","import React from 'react';\nimport ChartView from './components/ChartView'\nimport LineGraph from './components/LineGraph'\nimport ThreeD from './components/ThreeD'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LineGraph />\n      <ThreeD />\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}